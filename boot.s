	[BITS 16]
	[ORG 0x7C00]
	
	JMP SHORT ENTRYPOINT
	NOP
OEMNAME:	DB "DOSILE  "
BPBLOCK:	DW 512
SPCLUSTER:	DB 1
NUMRESERVED:	DW 1
NUMFATS:	DB 2
ROOTSIZE:	DW 224
NUMBLOCKS:	DW 2880
MEDIA:		DB 0xF0
SPFAT:		DW 9
SPTRACK:	DW 18
NUMHEADS:	DW 2
NUMHIDE:	DD 0
NUMTOTAL:	DD 2880
DRIVENUM:	DB 0
UNUSED:		DB 0
EBRS:		DB 0x29
SERIAL:		DD 0x12345678
FSTYPE:		DB "FAT12   "

ENTRYPOINT:
	JMP 0:CORRECTION
CORRECTION:
	XOR AX, AX
	MOV ES, AX
	MOV SS, AX
	MOV GS, AX
	MOV DS, AX
	MOV FS, AX
	MOV AX, 0x7C00
	MOV SP, AX
	
	MOV AL, BYTE [DRIVENUM]
	MOV BYTE [0x7C01], AL

	MOV SI, ENTRYSTR
	CALL PUTS
	
	XOR CX, CX			;CX = 0
	XOR DX, DX
	MOV AX, 32			;AX = 32
	MUL WORD [ROOTSIZE]		;AX = AX * 9
	DIV WORD [BPBLOCK]		;AX = AX / 512
	XCHG AX, CX			;CX, AX = AX, CX
	MOV AL, BYTE [NUMFATS]		;AX = 1
	MUL WORD [SPFAT]		;AX = AX * SECTORS_PER_FAT
	ADD AX, WORD [NUMRESERVED]	;AX = AX + RESERVED_SECTORS

	MOV WORD [DATA], AX		;DATA = AX
	ADD WORD [DATA], CX		;DATA += CX

	MOV BX, 0x7E00			;BX = ENTRYPOINT + 512
	CALL LOADSECTOR			;LOADSECTOR()
	
	MOV CX, WORD [ROOTSIZE]
	MOV DI, 0x7E00			;DI = ENTRYPOINT + 512
CMPLOOP:
	PUSH CX
	MOV CX, 11			;CX = 11
	MOV SI, IMGNAME			;SI = "DOSILE  SYS"
	PUSH DI
	
	REP CMPSB
	POP DI
	JZ FOUND
	POP CX
	ADD DI, 32
	LOOP CMPLOOP
	JMP NOTFOUND
FOUND:
	MOV DX, WORD [DI + 0x1A]	;DX = DI[32]
	MOV WORD [CLUSTER], DX		;CLUSTER = DX
	XOR AX, AX			;AX = 0
	MOV AL, BYTE [NUMFATS]		;AL = NUMFATS
	MUL WORD [SPFAT]		;AX *= SPFAT
	
	MOV CX, AX			;CX = AX
	MOV AX, WORD [NUMRESERVED]	;AX = NUMRESERVED
	MOV BX, 0x7E00			;BX = ENTRYPOINT + 512
	CALL LOADSECTOR			;LOADSECTOR(AX, BX, CX)

	MOV BX, 0x8100			;BX = 0x8100
	PUSH BX

LOADNEXT:
	MOV AX, WORD [CLUSTER]		;AX = CLUSTER
	
	POP BX				;RESTORE BX
	CALL CLUSTER2LBA		;CHS2LBA(AX)
	XOR CX, CX			;CX = 0
	MOV CL, BYTE [SPCLUSTER]	;CL = SPCLUSTER
	CALL LOADSECTOR			;LOADSECTOR(ADDRESS, AX)
	PUSH BX
	
	MOV AX, WORD [CLUSTER]
	MOV CX, AX
	MOV DX, AX
	
	SHR DX, 1
	ADD CX, DX
	MOV BX, 0x7E00
	ADD BX, CX
	MOV DX, WORD [BX]
	
	TEST AX, 1
	JNZ EVEN
ODD:
	AND DX, 0000111111111111b
	JMP NEXTDONE
EVEN:
	SHR DX, 4
NEXTDONE:
	MOV WORD [CLUSTER], DX
	CMP DX, 0x0FF0
	JB LOADNEXT
	
	JMP 0x8100

NOTFOUND:
	MOV SI, FATAL			;SI = &FATAL
	CALL PUTS			;PUTS(&FATAL)
	CLI
	HLT

;SI=&STR -> NIL
PUTS:
	PUSHA
	MOV AH, 0x0E
PUTSLOOP:
	LODSB
	OR AL, AL
	JZ ENDPUTS
	INT 0x10
	JMP PUTSLOOP
ENDPUTS:
	POPA
	RET

;ES:BX=*LOCATION, CX=COUNT -> NIL
LOADSECTOR:
	PUSH AX
	PUSH BX
	PUSH CX
	CALL LBA2CHS			;LBA2CHS(AX, CX)
	MOV AH, 2
	MOV AL, 1
	MOV CH, BYTE [TRACK]
	MOV CL, BYTE [SECTOR]
	MOV DH, BYTE [HEAD]
	MOV DL, BYTE [DRIVENUM]
	INT 0x13			;FLOPPY()
	JNC GOODLOAD			;IF NOT ERROR GOTO GOODLOAD
	
	MOV SI, ERROR			;
	CALL PUTS			;PUTS(&ERROR)
	CLI
	HLT

GOODLOAD:
	POP CX
	POP BX
	POP AX
	INC AX
	ADD BX, WORD [BPBLOCK]
	MOV SI, PROGRESS
	CALL PUTS
	LOOP LOADSECTOR
	MOV SI, OKAY
	CALL PUTS
	RET
	

;AX=CLUSTER -> AX=POSITION
CLUSTER2LBA:
	SUB AX, 2
	XOR CX, CX
	MOV CL, BYTE [SPCLUSTER]
	MUL CX
	ADD AX, WORD [DATA]
	RET

;AX=LBA -> NIL
LBA2CHS:
	XOR DX, DX
	DIV WORD [SPTRACK]
	INC DL
	MOV BYTE [SECTOR], DL

	XOR DX, DX
	DIV WORD [NUMHEADS]
	MOV BYTE [HEAD], DL
	MOV BYTE [TRACK], AL
	RET

SECTOR:		DB 0
TRACK:		DB 0
HEAD:		DB 0
DATA:		DW 0
CLUSTER:	DW 0

ENTRYSTR: 	DB 13, 10, "Forth bootstrap 0.0", 13, 10, 0
ERROR:		DB "ERROR LOADING", 0
PROGRESS:	DB "#", 0
OKAY:		DB " ok.", 13, 10, 0
IMGNAME:	DB "FORTH   SYS"
FATAL:		DB "forth.sys was not found", 0

	TIMES 510 - ($ - $$) DB 0
	DW 0xAA55

FATRAW:
	DB 0xF0, 0xFF
	DW 0xFFFF

	TIMES (512 * 2) - ($ - $$) DB 0
	TIMES (512 * 8) DB 0
ROOT:
